package org.example.seminar2;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;

/*üìî –ó–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–∞–π–ª —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏:
–ê–Ω–Ω–∞=4
–ï–ª–µ–Ω–∞=5
–ú–∞—Ä–∏–Ω–∞=6
–í–ª–∞–¥–∏–º–∏—Ä=?
–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω=?
–ò–≤–∞–Ω=4
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
(–ª–∏–±–æ HashMap, –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å –Ω–∏–º –∑–Ω–∞–∫–æ–º—ã). –í –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–µ—Ç–æ–¥–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏
–ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ?, –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —á–∏—Å–ª–æ.
–ï—Å–ª–∏ –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —á–∏—Å–ª–∞ –∏–ª–∏ ?,
–±—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.–ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ ?.
*/
public class Task1 {
    String inputText = "–ê–Ω–Ω–∞=4" +
            "\n" + "–ï–ª–µ–Ω–∞=5" +
            "\n" + "–ú–∞—Ä–∏–Ω–∞=6" +
            "\n" + "–í–ª–∞–¥–∏–º–∏—Ä=?" +
            "\n" + "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω=?" +
            "\n" + "–ò–≤–∞–Ω=4" + "\n" + "\n";

    public void run() {
        write(inputText);
        HashMap<String, String> data = readDataFromFile("notes3.txt");
        data = editedData(data);
        write(convertHashMapToString(data));
    }
    private void write (String text){
        try {
            FileWriter writerwriter = new FileWriter("notes3.txt", true);
            writerwriter.write(text);
            writerwriter.flush();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private HashMap<String, String> readDataFromFile(String fileName) {
       HashMap<String, String> data = new HashMap<String, String>();
        try {
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        String line;
        while ((line = br.readLine()) != null ) {
            if (line.matches(".*=.*")) {
                String[] parts = line.split("=");
                String name = parts[0];
                String value = parts[1];
                data.put(name, value);
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
        System.out.println("ok");
        return data;
    }

    private String convertHashMapToString(HashMap<String, String> data) {
        String result = "";
        for (String value: data.keySet()) {
            result = result + value + "=";
            result = result + data.get(value) + "\n";
        }
        return result;
    }

    private HashMap<String, String> editedData (HashMap<String, String> data) {
        for (String key: data.keySet()) {
            String regex = "\\d";
            if (data.get(key).matches(regex)) {
                continue;
            } else if (data.get(key).matches("\\?")){
                System.out.print(key + "=");
                System.out.println(data.get(key));
                int ansver = key.length();
                String value = "" + ansver;
                data.put(key, value);
            } else {
                System.out.println("fack");
            }
        }
        return data;
    }
}
